   [interrupteurs]
   / ?, -h, -help, --help, -man affiche l'aide
   -v, -ver affiche la version util

   [basic]
   cmdsqlite.exe <nom de la base de données> <requête>
   exemple : cmdsqlite.exe game.db "select name from game where name like 'a%'"

   cmdsqlite.exe <nom de la base de données> <.query>
   exemple : cmdsqlite.exe game.db test.query
   exécute la requête contenue dans le fichier test.query

   [exporter les résultats sous]
   exporttype's : csv, html, json, sql, xml
   cmdsqlite.exe <dbname> <query> <exporttype>

   pour un sql générique :
   cmdsqlite.exe <nom de fichier>.csv
   tablename = nom du fichier
   cmdsqlite.exe <nom du fichier>.json
   nom de l'onglet = nom du fichier
   cmdsqlite.exe <filename>.xml
   tablename = node record (actuellement un seul nœud profond)
   
   sql crée une structure de table sql et insère des données
   crée un <fichier>.sql
   peut être vérifié et importé dans la base de données via [import]

   cmdsqlite.exe <chemin> <filespec> <exporttype>
   exemple : cmdsqlite.exe g:\data\mp3\70s *.mp3 html

   special exporttype : cover
   exemple : cmdsqlite.exe g:\data\mp3\70s *.mp3 cover
   exporte la pochette de l'album en mp3 si elle est présente dans le dossier 'cover'
   génère également un rapport mp3cover.csv

   - déprecté
   ! en utilisant des modèles de dossiers : définir htmloutput = extra dans conf.ini
   ! en utilisant des modèles de dossiers : définir htmloutput = default dans conf.ini

   supplément exporttype : 'exif' comme quatrième paramètre optionnel
   exemple : cmdsqlite.exe g:\data\images\paris *.jpg csv exif
   génère un rapport avec
   largeur / hauteur en .jpg ou .png si présent

   exemple : cmdsqlite.exe g:\data\images\paris *.jpg html exif
   filespec *.jpg crée une visionneuse d'images

   exemple : cmdsqlite.exe g:\data\mp3\classic *.mp3 html exif
   filespec *.mp3 obtient des informations sur les balises et crée un lien audio

   l'absence de quatrième paramètre rétablit la valeur par défaut
   données métriques du fichier (fichier, taille du fichier, etc.)

   [import]
   vers la base de données sqlite :
   cmdsqlite.exe <dbname> <.sql>

   ! crée une base de données en utilisant <nom_de_la_base>.db ou importe la table <nom_de_la_base>.sql> si la base existe déjà.
     table si la base de données existe déjà

   [util]
   cmdsqlite.exe <dbname> showtables
                  <dbname> showfields <nom de la table>
               
   > conf/conf.ini <

   [application]
   ' options verbose, full
   logtype = full
   ' utilisé pour la construction du débogage
   usecons = false
   ' actuellement en, de, fr et nl
   locale = en

   ! mettre usecons à true pour un retour d'information dans la console
     note utilisez false si vous utilisez des résultats de piping '>' dans un fichier.
     dans un fichier

   > info <

   options spéciales :
   - afficher les tableaux dans la base de données
   <dbname> showtables

   - afficher les champs d'une table spécifique
   <dbname> showfields <nom du tableau>

   - vérifier si le fichier existe selon le chemin d'accès et le fichier dans le champ spécifié
   <dbname> <query> checkfile <nom du champ>
   checkfile renvoie -1 si le fichier existe, sinon zéro 0

   cmdsqlite.exe game.db "select name, developer from game" html
   exporte le résultat de la requête vers un tableau html triable (en utilisant des modèles)

   cmdsqlite.exe game.db "select name, developer from game" json
   équivalent de :
   select json_object('name', name, 'developer', developer) from game" json

   cmdsqlite.exe game.db "select name, developer from game" csv
   exporte le résultat de la requête vers un fichier csv

   les fichiers pris en charge sont .db

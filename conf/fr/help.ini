[commutateurs]
   /?, -h, -help, - help, -man affiche l'aide
   -v, -ver affiche la version util

   [verbeux]
   query:       cmdsqlite.exe <dbname> <query>
                cmdsqlite.exe <dbname> <nom de fichier> .query
   import:      cmdsqlite.exe <dbname> <nom de fichier> .sql
   exportation: cmdsqlite.exe <dbname> <dery> <exporttype>
                cmdsqlite.exe <athath> <fiespecec> <exporttype>
                cmdsqlite.exe <athath> <fiespecec> <ix exportype>
                cmdsqlite.exe <atath> <reshepépec> <pexporttype> exif
                cmdsqlite.exe <athath> <fiespecec> <exporttype> fts
   util:        cmdsqlite.exe <dbname> showtables
                cmdsqlite.exe <dbname> showfields <nom de table>
                cmdsqlite.exe <dbname> <dery> checkfile <nom du champ>
                cmdsqlite.exe <athal> folderinfo
   catalogue:   cmdsqlite.exe <dite> catalogue <exporttype = sql>
   converti:    cmdsqlite.exe <path\file> .mht

   [basique]
   cmdsqlite.exe <dbname> <query>
   exemple: cmdsqlite.exe jeu.db "sélectionnez le nom du jeu où le nom comme" a% ""

   cmdsqlite.exe <dbname> <nom de fichier> .query
   exemple: cmdsqlite.exe game.db test.query
   exécute la requête contenue dans le fichier test.query

   [exporter]
   exporttype's: csv, html, json, sql, xml
   cmdsqlite.exe <dbname> <queery> <exporttype>

   à sql générique:
   cmdsqlite.exe <nom de fichier> .csv
   cmdsqlite.exe <filename> .json
   tablename = nom de fichier
   cmdsqlite.exe <nom de fichier> .xml
   tablename = node record (actuellement un seul nœud de profondeur)

   cmdsqlite.exe <drive:\path> *. <filetype> <exporttype>

   paramètre facultatif: fts
   crée une recherche de table de recherche de texte virtuel ou complet
   exemple: cmdsqlite.exe <nom de fichier> .json fts
   remarque: la tokenisation n'est pas prise en charge ...

   exemple: cmdsqlite.exe <nom de fichier> .json> <nom de fichier> .sql
   crée un <nom de fichier> .sql
   qui contient une structure de table sql plus des inserts
   peut être vérifié puis importé dans la base de données

   cmdsqlite.exe <athath> <fiespecec> <exporttype>
   exemple: cmdsqlite.exe g:\data\mp3\70s * .mp3 html

   exportype spécial: couverture
   exemple: cmdsqlite.exe g:\data\mp3\70s * .mp3
   exportation de la couverture de l'album en mp3 si présent vers le dossier 'couverture'
   génère également un rapport mp3cover.csv

   supplément exporttype: 'exif' en tant que quatrième paramètre facultatif
   exemple: cmdsqlite.exe g:\data\images\paris * .jpg csv exif
   génère un rapport avec:
   orientation, largeur, hauteur, taille de fichiers et vignette présente
   de .jpg ou .png si présent

   exemple: cmdsqlite.exe g:\data\images\paris * .jpg html exif
   filespec * .jpg crée imageviewer

   exemple: cmdsqlite.exe g:\data\mp3\classique * .mp3 html exif
   filespec * .mp3 obtient des informations de balise et crée un lien audio
   remarque: la dernière partie du chemin est ajoutée comme thème

   fichier d'exportation et liste de dossiers
   exemple cmdsqlite.exe f:\dev * .txt sql

   remarque: aucun quatrième paramètre ne revient à par défaut
   données métriques de fichier (fichier, taille de fichiers, etc.)
   
   [importer]
   à la base de données sqlite:
   cmdsqlite.exe <dbname> <nom de fichier> .sql

   ! crée une base de données à l'aide de <dbname> .db ou importe le
     table si la base de données excite déjà

   [util]
   cmdsqlite.exe <dbname> showtables
                 <dbname> showfields <nom de la table>
                 <dbname> <dery> checkfile <nom du champ>
                 <ammor> folderinfo
                 'afficher le lecteur d'informations métriques et les dossiers du chemin

   [convertir]
   les fichiers .mht sont convertis en .txt et .html
   utilisation: <nom de fichier> .mht
   exemple: cmdsqlite.exe g:\data\text\demo.mht
   crée un dossier <filon nom> et extrait tous les fichiers du .mht
   plus convertit le .html principal en un fichier texte word-capted sperate.

   [catalogue]
   catalogue données métriques du dossier sur le lecteur
   archive de table: étiquette, capacité, espace, dossier
   données de table: étiquette, dossier, données, taille
   exemple: cmdsqlite.exe e:\catalog sql
            cmdsqlite.exe <lading> catalogue <exporttype = sql>

   le sql résultant peut être importé dans une base de données
   remarque: pour des raisons pratiques, l'étiquette des disques doit être unique
         les deux définitions de table pour les archives et les données sont créées
         deux fois, pour initalialiser la base de données et une fois pour retirer
         anciennes données, si le lecteur était précédemment catalogué.

   > conf / conf.ini <

   [application]
   'options verbeuses, complètes
   logtype = complet
   'utilisé pour la construction de débogage
   usecons = faux
   'actuellement en, de, fr et nl
   locale = en

   ! définissez usecons sur true pour les commentaires dans consolse
     remarque utiliser false lorsque vous utilisez des résultats de tuyauterie '>'
     à un fichier

   > exemples et informations <

   verfiy si le fichier excise en fonction du chemin et du fichier dans le champ spécifié
   <dbname> <dery> checkfile <nom du champ>
   checkfile renvoie -1 si le fichier existe, sinon zéro 0

   cmdsqlite.exe jeu.db "sélectionnez nom, développeur du jeu" html
   exporte le résultat de la requête vers une table triable html (à l'aide de modèles)

   cmdsqlite.exe game.db "sélectionner le nom, développeur du jeu" json
   superquette de:
   select json_object ('name', nom, 'développeur', développeur) du jeu "json

   cmdsqlite.exe game.db "sélectionner le nom, développeur du jeu" csv
   exporte le résultat de la requête vers un fichier csv

   interroger des tables avec un trait d'union / moins ex. nom de table utilise «nom de table»
   "sélectionnez nom, développeur de 'game-with-hyphen'"
   
   voir: tutoriels dans le dossier de données pour plus d'informations indépendantes
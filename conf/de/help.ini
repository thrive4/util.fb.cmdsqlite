[switches]
   /?, -h, -help, -help, -man zeigt hilfe an
   -v, -ver zeigt die version util an

   [ausführlich]
   abfrage:      cmdsqlite.exe <dbname> <query>
                 cmdsqlite.exe <dbname> <filename> .query
   import:       cmdsqlite.exe <dbname> <filename> .sql
   export:       cmdsqlite.exe <dbname> <query> <xporttype>
                 cmdsqlite.exe <path> <filespec> <xportype>
                 cmdsqlite.exe <path> <filespec> <xportype> abdeckung
                 cmdsqlite.exe <path> <filespec> <xportetype> exif
                 cmdsqlite.exe <path> <filespec> <xportektypen> fts
   util:         cmdsqlite.exe <dbname> sendungen
                 cmdsqlite.exe <dbname> showfields <tabellenname>
                 cmdsqlite.exe <dbname> <query> checkfile <field name>
                 cmdsqlite.exe <path> orderinfo
   katalog:      cmdsqlite.exe <iver> katalog <exportetype = sql>
   konvertieren: cmdsqlite.exe <path\file> .mht

   [basic]
   cmdsqlite.exe <dbname> <query>
   beispiel: cmdsqlite.exe game.db "wählen sie den namen aus dem spiel aus, wobei der name 'a%'" "

   cmdsqlite.exe <dbname> <filename> .query
   beispiel: cmdsqlite.exe game.db test.query
   leitet die in test.query -datei enthaltene abfrage aus

   [export]
   exportype's: csv, html, json, sql, xml
   cmdsqlite.exe <dbname> <query> <xportetype>

   zu generischer sql:
   cmdsqlite.exe <dateiname> .csv
   cmdsqlite.exe <filename> .json
   tablename = dateiname
   cmdsqlite.exe <dateiname> .xml
   tablename = knotendatensatz (derzeit nur ein knoten tief)

   cmdsqlite.exe <drive:\path> *. <filetype> <xporttype>

   optionaler parameter: fts
   erstellt eine virtuelle oder vollständige textsuche für die tabellenverfolgung
   beispiel: cmdsqlite.exe <dateiname> .json fts
   hinweis: tokenisierung nicht unterstützt .... noch

   beispiel: cmdsqlite.exe <dateiname> .json> <filename> .sql
   erstellt einen <filename> .sql
   die sql -tabellenstruktur plus einsätze enthält
   kann überprüft und dann in die datenbank importiert werden

   cmdsqlite.exe <path> <filespec> <xportype>
   beispiel: cmdsqlite.exe g:\data\mp3\70s *.mp3 html

   spezialer exporttyp: cover
   beispiel: cmdsqlite.exe g:\data\mp3\70s *.mp3 cover
   exportiert album cover in mp3, wenn der ordner "cover" vorhanden ist
   generiert auch einen bericht mp3cover.csv

   ergänzung exporttype: 'exif' als optionaler viertes parameter
   beispiel: cmdsqlite.exe g:\data\images\paris *.jpg csv exif
   generiert bericht mit:
   orientierung, breite, höhe, filegröße und miniaturansicht vorhanden
   von .jpg oder .png wenn vorhanden

   beispiel: cmdsqlite.exe g:\data\images\paris *.jpg html exif
   filespec *.jpg erstellt imageviewer

   beispiel: cmdsqlite.exe g:\data\mp3\classic *.mp3 html exif
   filespec *.mp3 holt tagsinformationen ab und erstellt einen audio -link
   hinweis: der letzte teil des pfades wird als thema hinzugefügt

   exportdatei- und ordnerliste
   beispiel cmdsqlite.exe f:\dev *.txt sql

   hinweis: kein vierter parameter kehrt auf standard zurück
   dateimetrische daten (datei, fileside usw.)

   [import]
   zu sqlite -datenbank:
   cmdsqlite.exe <dbname> <filename> .sql

   ! erstellt eine datenbank mit <dbname> .db oder importiert die
     tabelle, wenn die datenbank bereits ausreißt

   [util]
   cmdsqlite.exe <dbname> showtables
                 <dbname> showfields <tabellenname>
                 <dbname> <query> checkfile <field name>
                 <path> ordnerinfo
                 'metrische info -laufwerk und ordner im pfad anzeigen

   [konvertieren]
   .mht -dateien werden in .txt und .html konvertiert
   nutzung: <filename> .mht
   beispiel: cmdsqlite.exe g:\data\text\demo.mht
   erstellt einen ordner <dateiname> und extrahiert alle dateien in der .mht
   plus konvertiert die haupt -.html in eine textdatei mit wörwörgerischer sperge.

   [katalog]
   katalogmetrische datendaten des ordners auf dem laufwerk
   tabellenarchiv: etikett, kapazität, platz, ordnerordnungsmittel
   tabellendaten: beschriftung, ordner, daten, größe
   beispiel: cmdsqlite.exe e:\catalog sql
            cmdsqlite.exe <iver> katalog <exporttype = sql>

   die resultierende sql kann in eine datenbank importiert werden
   hinweis: aus praktischen gründen sollte das drives -etikett einzigartig sein
         beide tabellendefitionen für archiv und daten werden erstellt
         zweimal die datenbank und einmal zum entfernen
         alte daten, wenn das laufwerk zuvor katalogisiert wurde.

   > conf/conf.ini <

   [anwendung]
   'optionen ausführlich, voll
   logtype = voll
   'verwendet für debugg build
   usecons = false
   'derzeit en, de, fr und nl
   lokalschema = en

   ! setzen sie die usacons für feedback in consolse auf das richtige
     hinweis verwenden sie false, wenn sie die ergebnisse verwenden. '>' ergebnisse
     zu einer datei

   > beispiele und info <

   verfiy, wenn datei nach pfad und datei im angegebenen feld ausreißt
   <dbname> <query> checkfile <field name>
   checkfile gibt -1 zurück, wenn die datei vorliegt, ansonsten null 0

   cmdsqlite.exe game.db "name, entwickler aus dem spiel" html
   exportiert das abfrageergebnis in eine html -sortierbare tabelle (unter verwendung von vorlagen)

   cmdsqlite.exe game.db "name, entwickler aus dem spiel" json
   gleichivaler von:
   wählen sie json_object ('name', name, entwickler, entwickler) aus dem spiel "json

   cmdsqlite.exe game.db "name aus wählen sie name, entwickler aus dem spiel" csv
   exportiert das abfrageergebnis in eine csv -datei

   abfragen von tischen mit einem bindestrich / minus ex. tabellenname "tabellenname" verwenden
   "wählen sie den namen, entwickler aus 'game-with-hyphen'"
   
   siehe: tutorials im datenordner finden sie für weitere infos
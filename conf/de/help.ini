   [Schalter]
   /?, -h, -help, --help, -man zeigt Hilfe an
   -v, -ver zeigt die Version util an

   [basic]
   cmdsqlite.exe <Datenbankname> <Abfrage>
   Beispiel: cmdsqlite.exe game.db "select name from game where name like 'a%'"

   cmdsqlite.exe <Datenbankname> <.abfrage>
   Beispiel: cmdsqlite.exe spiel.db test.abfrage
   führt die in der Datei test.query enthaltene Abfrage aus

   [export]
   exporttype's: csv, html, json, sql, xml
   cmdsqlite.exe <dbname> <abfrage> <exporttyp>

   zu generischem sql:
   cmdsqlite.exe <Dateiname>.csv
   tablename = Dateiname
   cmdsqlite.exe <Dateiname>.json
   Tabellenname = Dateiname
   cmdsqlite.exe <Dateiname>.xml
   tablename = node record (derzeit nur ein Knoten tief)

   ! sql erstellt eine sql-Tabellenstruktur und fügt ein

   cmdsqlite.exe <Pfad> <Dateispezifikation> <Exporttyp>
   Beispiel: cmdsqlite.exe g:\data\mp3\70s *.mp3 html

   spezieller exporttyp: cover
   Beispiel: cmdsqlite.exe g:\data\mp3\70s *.mp3 cover
   exportiert Albumcover in mp3, falls vorhanden, in den Ordner 'cover'
   erzeugt auch einen Bericht mp3cover.csv

   - erstellt
   ! bei Verwendung von Ordner-Vorlagen: setze htmloutput = extra in conf.ini
   ! bei Verwendung von Ordner-Vorlagen : htmloutput = default in conf.ini setzen

   exporttype: 'exif' als optionalen vierten Parameter ergänzen
   Beispiel: cmdsqlite.exe g:\data\images\paris *.jpg csv exif
   erzeugt Bericht mit
   Breite / Höhe in .jpg oder .png, falls vorhanden

   Beispiel: cmdsqlite.exe g:\data\images\paris *.jpg html exif
   filespec *.jpg erzeugt imageviewer

   Beispiel: cmdsqlite.exe g:\data\mp3\klassisch *.mp3 html exif
   filespec *.mp3 holt Tag-Informationen und erstellt Audio-Link

   kein vierter Parameter kehrt zum Standard zurück
   Dateimetrische Daten (Datei, Dateigröße usw.)

   [import]
   in die sqlite-Datenbank:
   cmdsqlite.exe <dbname> <.sql>

   ! erstellt eine Datenbank mit <dbname>.db oder importiert die
     Tabelle, wenn die Datenbank bereits existiert

   [util]
   cmdsqlite.exe <dbname> showtables
                  <dbname> showfields <Tabellenname>

   > conf/conf.ini <

   [application]
   ' Optionen verbose, full
   logtype = full
   ' verwendet für Debug-Build
   usecons = false
   ' derzeit en, de, fr und nl
   locale = en

   ! usecons auf true setzen für Feedback in der Konsole
     Hinweis: false verwenden, wenn die Ergebnisse von Piping '>'
     in eine Datei

   > info <

   Spezielle Optionen:
   - showtables in der Datenbank
   <Datenbankname> showtables

   - showfields in einer bestimmten Tabelle
   <dbname> showfields <Tabellenname>

   - Überprüfen, ob eine Datei gemäß Pfad und Datei im angegebenen Feld vorhanden ist
   <dbname> <Abfrage> checkfile <Feldname>
   checkfile gibt -1 zurück, wenn die Datei existiert, sonst Null 0

   cmdsqlite.exe game.db "select name, developer from game" html
   exportiert das Abfrageergebnis in eine sortierbare html-Tabelle (unter Verwendung von Vorlagen)

   cmdsqlite.exe spiel.db "select name, entwickler aus spiel" json
   Äquivalent zu:
   select json_object('name', name, 'entwickler', entwickler) from spiel" json

   cmdsqlite.exe spiel.db "select name, entwickler aus spiel" csv
   exportiert Abfrageergebnis in eine csv-Datei

   Unterstützte Dateien sind .db

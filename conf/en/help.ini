   [switches]
   /?, -h, -help, --help, -man displays help
   -v, -ver                    displays version util

   [verbose]
   query:   cmdsqlite.exe <dbname> <query>
            cmdsqlite.exe <dbname> <filename>.query
   import:  cmdsqlite.exe <dbname> <filename>.sql
   export:  cmdsqlite.exe <dbname> <query> <exporttype>
            cmdsqlite.exe <path> <filespec> <exporttype>
            cmdsqlite.exe <path> <filespec> <exporttype> cover
            cmdsqlite.exe <path> <filespec> <exporttype> exif
            cmdsqlite.exe <path> <filespec> <exporttype> fts
   util:    cmdsqlite.exe <dbname> showtables
            cmdsqlite.exe <dbname> showfields <table name>
            cmdsqlite.exe <dbname> <query> checkfile <field name>
            cmdsqlite.exe <path>   folderinfo
   catalog: cmdsqlite.exe <drive> catalog <exporttype = sql>
   convert: cmdsqlite.exe <path\file>.mht

   [basic]
   cmdsqlite.exe <dbname> <query>
   example: cmdsqlite.exe game.db "select name from game where name like 'a%'"

   cmdsqlite.exe <dbname> <filename>.query
   example: cmdsqlite.exe game.db test.query
   runs the query contained in test.query file

   [export]
   exporttype's: csv, html, json, sql, xml
   cmdsqlite.exe <dbname> <query> <exporttype>

   to generic sql:
   cmdsqlite.exe <filename>.csv
   cmdsqlite.exe <filename>.json
   tablename = filename
   cmdsqlite.exe <filename>.xml
   tablename = node record (currently only one node deep)

   cmdsqlite.exe <drive:\path> *.<filetype> <exporttype>

   optional parameter: fts
   creates a virtual or full text search enabled table defenition
   example: cmdsqlite.exe <filename>.json fts
   note: tokenization not supported.... yet

   example: cmdsqlite.exe <filename>.json > <filename>.sql
   creates a <filename>.sql
   which contains sql table structure plus inserts
   can be verified and then imported to database

   cmdsqlite.exe <path> <filespec> <exporttype>
   example: cmdsqlite.exe g:\data\mp3\70s *.mp3 html

   special exporttype: cover
   example: cmdsqlite.exe g:\data\mp3\70s *.mp3 cover
   exports album cover in mp3 if present to folder 'cover'
   also generates a report mp3cover.csv

   supplement exporttype: 'exif' as optional fourth parameter
   example: cmdsqlite.exe g:\data\images\paris *.jpg csv exif
   generates report with:
   orientation, width, height, filesize and thumbnail present
   of .jpg or .png if present

   example: cmdsqlite.exe g:\data\images\paris *.jpg html exif
   filespec *.jpg creates imageviewer

   example: cmdsqlite.exe g:\data\mp3\classic *.mp3 html exif
   filespec *.mp3 gets tag info and creates audio link
   note: the last part of the path is added as theme

   export file and folder list
   example cmdsqlite.exe f:\dev *.txt sql

   note: no fourth parameter reverts to default
   file metric data (file, filesize, etc)

   [import]
   to sqlite database:
   cmdsqlite.exe <dbname> <filename>.sql

   ! creates a database using <dbname>.db or imports the
     table if the database already excists

   [util]
   cmdsqlite.exe <dbname> showtables
                 <dbname> showfields <table name>
                 <dbname> <query> checkfile <field name>
                 <path>   folderinfo
                 ' show metric info drive and folders in path

   [convert]
   .mht files are converted to .txt and .html
   usage: <filename>.mht
   example: cmdsqlite.exe g:\data\text\demo.mht
   creates a folder <filename> and extracts all files in the .mht
   plus converts the main .html to a sperate wordwrapped text file.

   [catalog]
   catalog metric data of folder on drive
   table archive: label, capacity, space, foldersize
   table data:    label, folder, data, size
   example: cmdsqlite.exe e:\ catalog sql
            cmdsqlite.exe <drive> catalog <exporttype = sql>

   the resulting sql can be imported into a database
   note: for practical reasons the drives label should be unique
         both table defnitions for archive and data are created
         twice, to initalize the database and once for removing
         old data, if the drive was previously cataloged.

   > conf/conf.ini <

   [application]
   ' options verbose, full
   logtype         = full
   ' used for debug build
   usecons         = false
   ' currently en, de, fr and nl
   locale          = en

   ! set usecons to true for feedback in consolse
     note use false when using piping '>' results
     to a file

   > examples and info <

   verfiy if file excists according to path and file in specified field
   <dbname> <query> checkfile <field name>
   checkfile returns -1 if the file exists, otherwise zero 0

   cmdsqlite.exe game.db "select name, developer from game" html
   exports query result to an html sortable table (using templates)

   cmdsqlite.exe game.db "select name, developer from game" json
   equivelent of:
   select json_object('name', name, 'developer', developer) from game" json

   cmdsqlite.exe game.db "select name, developer from game" csv
   exports query result to a csv file

   querying tables with a hyphen / minus ex. table-name use 'table-name'
   "select name, developer from 'game-with-hyphen'"
   
   see: tutorials in data folder for more indepth info

